import React, { useState, useRef, useCallback, useEffect } from 'react'
import { getGlobalWebSocketClient } from '../services/websocket'

interface AudioRecorderProps {
  onRecordingStart: () => void
  onRecordingStop: () => void
  onUploadSuccess: (blob?: Blob) => void
  onUploadError: () => void
  onTranscription?: (text: string) => void
  onAnalysis?: (analysis: any) => void
  isRecording: boolean
  disabled?: boolean
}

const AudioRecorder: React.FC<AudioRecorderProps> = ({
  onRecordingStart,
  onRecordingStop,
  onUploadSuccess,
  onUploadError,
  onTranscription,
  onAnalysis,
  isRecording,
  disabled = false
}) => {
  const [mediaRecorder, setMediaRecorder] = useState<MediaRecorder | null>(null)
  const [audioLevel, setAudioLevel] = useState(0)
  const audioChunks = useRef<Blob[]>([])
  const audioContextRef = useRef<AudioContext | null>(null)
  const analyserRef = useRef<AnalyserNode | null>(null)
  const animationRef = useRef<number | null>(null)
  const streamRef = useRef<MediaStream | null>(null)
  const wsClient = useRef<any>(null)
  const [wsConnected, setWsConnected] = useState(false)

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ WebSocket –∫–ª–∏–µ–Ω—Ç–∞
  useEffect(() => {
    const initializeWebSocket = async () => {
      // –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä WebSocket –∫–ª–∏–µ–Ω—Ç–∞
      wsClient.current = getGlobalWebSocketClient(
        (text: string) => {
          console.log('–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞:', text)
          onTranscription?.(text)
        },
        (error: string) => {
          console.error('–û—à–∏–±–∫–∞ WebSocket:', error)
          onUploadError()
        },
        () => {
          console.log('WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω')
          setWsConnected(true)
        },
        () => {
          console.log('WebSocket –æ—Ç–∫–ª—é—á–µ–Ω')
          setWsConnected(false)
        },
        (analysis: any) => {
          console.log('–ê–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω:', analysis)
          onAnalysis?.(analysis)
        }
      )

      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
      try {
        if (!wsClient.current.connected) {
          await wsClient.current.connect()
          console.log('üîó WebSocket —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ')
        } else {
          console.log('üîó WebSocket —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ')
          setWsConnected(true) // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ WebSocket
        }
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è/–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ WebSocket:', wsClient.current.connected)
        if (wsClient.current.connected) {
          setWsConnected(true)
        }
      } catch (error) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WebSocket:', error)
      }
    }

    initializeWebSocket()

    // –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º cleanup —Ñ—É–Ω–∫—Ü–∏—é - WebSocket –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º –Ω–∞–≤—Å–µ–≥–¥–∞
    // return () => { ... }
  }, [onTranscription, onUploadError])

  // –ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ —É—Ä–æ–≤–Ω—è
  const analyzeAudio = useCallback(() => {
    if (!analyserRef.current) return

    const dataArray = new Uint8Array(analyserRef.current.frequencyBinCount)
    analyserRef.current.getByteFrequencyData(dataArray)
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–≤—É–∫–∞
    const average = dataArray.reduce((sum, value) => sum + value, 0) / dataArray.length
    const normalizedLevel = Math.min(average / 128, 1) // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç 0 –¥–æ 1
    
    setAudioLevel(normalizedLevel)
    
    if (isRecording) {
      animationRef.current = requestAnimationFrame(analyzeAudio)
    }
  }, [isRecording])

  const startRecording = useCallback(async () => {
    console.log('üé§ startRecording –≤—ã–∑–≤–∞–Ω')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –≤—ã–∑–≤–∞–Ω–∞ –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ
    if (isRecording) {
      console.log('‚ö†Ô∏è –ó–∞–ø–∏—Å—å —É–∂–µ –∏–¥–µ—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—ã–∑–æ–≤')
      return
    }
    
    try {
      console.log('üéôÔ∏è –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É...')
      const stream = await navigator.mediaDevices.getUserMedia({ 
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          sampleRate: 44100
        } 
      })
      
      streamRef.current = stream
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∞—É–¥–∏–æ
      audioContextRef.current = new (window.AudioContext || (window as any).webkitAudioContext)()
      analyserRef.current = audioContextRef.current.createAnalyser()
      const source = audioContextRef.current.createMediaStreamSource(stream)
      
      analyserRef.current.fftSize = 256
      source.connect(analyserRef.current)
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ
      // analyzeAudio()
      
      const recorder = new MediaRecorder(stream, {
        mimeType: 'audio/webm;codecs=opus'
      })
      
      audioChunks.current = []
      
      recorder.ondataavailable = (event) => {
        console.log(`üéµ ondataavailable –≤—ã–∑–≤–∞–Ω, —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: ${event.data.size} –±–∞–π—Ç`)
        if (event.data.size > 0) {
          audioChunks.current.push(event.data)
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —á–∞–Ω–∫ —á–µ—Ä–µ–∑ WebSocket –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
          console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º WebSocket: wsClient=${!!wsClient.current}, wsConnected=${wsConnected}, wsClient.connected=${wsClient.current?.connected}`)
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º wsClient.current.connected –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ wsConnected
          if (wsClient.current && wsClient.current.connected) {
            console.log('üì§ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —á–∞–Ω–∫ —á–µ—Ä–µ–∑ WebSocket')
            event.data.arrayBuffer().then(arrayBuffer => {
              console.log(`üìä ArrayBuffer —Ä–∞–∑–º–µ—Ä: ${arrayBuffer.byteLength} –±–∞–π—Ç`)
              wsClient.current?.sendAudioChunk(arrayBuffer)
              
              // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫ (–∑–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º 'end' –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
              if (!isRecording && recorder.state === 'inactive') {
                setTimeout(() => {
                  if (wsClient.current && wsClient.current.connected) {
                    console.log('üîö –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–∞–Ω–∫–∞')
                    wsClient.current.endTranscription()
                  }
                }, 50)
              }
            })
          } else {
            console.warn('‚ö†Ô∏è WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ —á–∞–Ω–∫–∞')
            console.warn('üîç –î–µ—Ç–∞–ª–∏ WebSocket:', {
              wsClient: !!wsClient.current,
              wsConnected: wsConnected,
              wsClientConnected: wsClient.current?.connected
            })
          }
        } else {
          console.warn('‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∞—É–¥–∏–æ —á–∞–Ω–∫')
        }
      }
      
      recorder.onstop = () => {
        const audioBlob = new Blob(audioChunks.current, { type: 'audio/webm' })
        
        console.log('‚èπÔ∏è –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ blob')
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        onUploadSuccess(audioBlob)
        
        // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        if (animationRef.current) {
          cancelAnimationFrame(animationRef.current)
        }
        if (audioContextRef.current) {
          audioContextRef.current.close()
        }
        if (streamRef.current) {
          streamRef.current.getTracks().forEach(track => track.stop())
        }
        setAudioLevel(0)
      }
      
      recorder.start(100) // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 100–º—Å –¥–ª—è real-time —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
      setMediaRecorder(recorder)
      onRecordingStart()
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É:', error)
      onUploadError()
    }
  }, [onRecordingStart, onUploadError, analyzeAudio])

  const stopRecording = useCallback(() => {
    if (mediaRecorder && mediaRecorder.state === 'recording') {
      mediaRecorder.stop()
      setMediaRecorder(null)
      onRecordingStop()
    }
  }, [mediaRecorder, onRecordingStop])


  const handleClick = useCallback(() => {
    console.log('üéØ –ö–ª–∏–∫ –ø–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É, disabled:', disabled, 'isRecording:', isRecording)
    
    if (disabled) {
      console.log('‚ùå –ú–∏–∫—Ä–æ—Ñ–æ–Ω –æ—Ç–∫–ª—é—á–µ–Ω, –∫–ª–∏–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è')
      return
    }
    
    if (isRecording) {
      console.log('‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å')
      stopRecording()
    } else {
      console.log('üé§ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å')
      startRecording()
    }
  }, [isRecording, startRecording, stopRecording, disabled])

  // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –∑–≤—É–∫–∞
  const glowOpacity = 0.3 + (audioLevel * 0.4) // –û—Ç 0.3 –¥–æ 0.7

  return (
    <div className="flex flex-col items-center">
      <div className="relative">
        {/* –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–æ–ª—å—Ü–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –¥–ª—è –≤–∏–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ */}
        {isRecording && (
          <>
            {/* –í–Ω–µ—à–Ω–µ–µ –∫–æ–ª—å—Ü–æ - —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∑–≤—É–∫ */}
            <div 
              className="absolute inset-0 rounded-full transition-all duration-100"
              style={{
                transform: `scale(${1.8 + audioLevel * 0.6})`,
                opacity: glowOpacity * 0.3,
                filter: 'blur(8px)',
                background: `linear-gradient(135deg, rgba(34, 197, 94, ${glowOpacity * 0.5}), rgba(16, 185, 129, ${glowOpacity * 0.5}))`
              }}
            />
            
            {/* –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –∫–æ–ª—å—Ü–æ */}
            <div 
              className="absolute inset-0 rounded-full transition-all duration-150"
              style={{
                transform: `scale(${1.3 + audioLevel * 0.4})`,
                opacity: glowOpacity * 0.6,
                filter: 'blur(4px)',
                background: `linear-gradient(135deg, rgba(34, 197, 94, ${glowOpacity * 0.7}), rgba(16, 185, 129, ${glowOpacity * 0.7}))`
              }}
            />
          </>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –≤ —Ü–≤–µ—Ç–∞—Ö —Å–∞–π—Ç–∞ */}
        <button
          onClick={handleClick}
          disabled={disabled}
          className={`relative group z-10 w-20 h-20 rounded-full flex items-center justify-center transition-all duration-300 ease-in-out focus:outline-none border-2 ${
            isRecording 
              ? 'focus:ring-4 focus:ring-accent-blue/20' 
              : disabled
                ? ''
                : 'focus:ring-4 focus:ring-dark-500/20'
          }`}
          style={{
            background: isRecording 
              ? 'linear-gradient(135deg, rgba(59, 130, 246, 0.9), rgba(139, 92, 246, 0.9))'
              : disabled
                ? 'rgba(75, 85, 99, 0.7)'
                : 'linear-gradient(135deg, rgba(239, 68, 68, 0.9), rgba(220, 38, 38, 0.9))',
            borderColor: isRecording 
              ? 'rgba(59, 130, 246, 0.8)'
              : disabled
                ? 'rgba(107, 114, 128, 0.8)'
                : 'rgba(239, 68, 68, 0.8)',
            boxShadow: isRecording 
              ? '0 8px 25px -8px rgba(59, 130, 246, 0.4)'
              : disabled
                ? 'none'
                : '0 4px 15px -4px rgba(239, 68, 68, 0.3)',
            cursor: disabled ? 'not-allowed' : 'pointer',
            transform: isRecording ? 'scale(1.1)' : 'scale(1)'
          }}
        >
          {/* –ò–∫–æ–Ω–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ */}
          {isRecording ? (
            <div className="w-5 h-5 bg-white rounded-sm"></div>
          ) : (
            <svg
              className="w-7 h-7 text-white"
              fill="currentColor"
              viewBox="0 0 24 24"
            >
              {/* –í—ã–∫–ª—é—á–µ–Ω–Ω—ã–π –º–∏–∫—Ä–æ—Ñ–æ–Ω —Å –ø–µ—Ä–µ—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º */}
              <path d="M19 11h-1.7c0 .74-.16 1.43-.43 2.05l1.23 1.23c.56-.98.9-2.09.9-3.28zm-4.02.17c0-.06.02-.11.02-.17V5c0-1.66-1.34-3-3-3S9 3.34 9 5v.18l5.98 5.99zM4.27 3L3 4.27l6.01 6.01V11c0 1.66 1.33 3 2.99 3 .22 0 .44-.03.65-.08l1.66 1.66c-.71.33-1.5.52-2.31.52-2.76 0-5.3-2.1-5.3-5.1H5c0 3.41 2.72 6.23 6 6.72V21h2v-3.28c.91-.13 1.77-.45 2.54-.9L19.73 21 21 19.73 4.27 3z"/>
            </svg>
          )}

          {/* –®–∏–º–º–µ—Ä —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ */}
          {!isRecording && !disabled && (
            <div className="absolute inset-0 rounded-full overflow-hidden opacity-0 group-hover:opacity-100 transition-opacity duration-300">
              <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent animate-shimmer transform -skew-x-12"></div>
            </div>
          )}
        </button>
      </div>
      
      {disabled && !isRecording && (
        <div className="mt-2 text-xs text-dark-500">–û–±—Ä–∞–±–æ—Ç–∫–∞...</div>
      )}
    </div>
  )
}

export default AudioRecorder
