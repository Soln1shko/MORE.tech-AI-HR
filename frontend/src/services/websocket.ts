// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä WebSocket –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
import { getConfig } from '../config/environment'

let globalWebSocketClient: VoiceTranscriptionClient | null = null

// WebSocket –∫–ª–∏–µ–Ω—Ç –¥–ª—è real-time —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
export class VoiceTranscriptionClient {
  private ws: WebSocket | null = null
  private isConnected = false
  private messageQueue: any[] = []
  private onTranscriptionCallback?: (text: string) => void
  private onAnalysisCallback?: (analysis: any) => void
  private onErrorCallback?: (error: string) => void
  private onConnectedCallback?: () => void
  private onDisconnectedCallback?: () => void

  constructor(
    onTranscription?: (text: string) => void,
    onError?: (error: string) => void,
    onConnected?: () => void,
    onDisconnected?: () => void,
    onAnalysis?: (analysis: any) => void
  ) {
    this.onTranscriptionCallback = onTranscription
    this.onErrorCallback = onError
    this.onConnectedCallback = onConnected
    this.onDisconnectedCallback = onDisconnected
    this.onAnalysisCallback = onAnalysis
  }

  async connect(): Promise<void> {
    return new Promise((resolve, reject) => {
      try {
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ (–ø–æ—Ä—Ç 8001)
        this.ws = new WebSocket(getConfig().WS_VOICE_URL)
        
        this.ws.onopen = () => {
          console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –Ω–∞ ws://localhost:8001/ws/voice')
          this.isConnected = true
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
          while (this.messageQueue.length > 0) {
            const message = this.messageQueue.shift()
            console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message)
            this.ws?.send(JSON.stringify(message))
          }
          
          this.onConnectedCallback?.()
          resolve()
        }

        this.ws.onmessage = (event) => {
          try {
            console.log('üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç WebSocket:', event.data)
            const data = JSON.parse(event.data)
            
            if (data.type === 'transcription') {
              console.log('üé§ –ü–æ–ª—É—á–µ–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:', data.text)
              this.onTranscriptionCallback?.(data.text)
              
              // –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
              // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
              console.log('‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º')
            } else if (data.type === 'final_result') {
              console.log('üéØ –ü–æ–ª—É—á–µ–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', data)
              console.log('üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:', data.transcription)
              console.log('üìä –ê–Ω–∞–ª–∏–∑:', data.analysis)
              
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —á–µ—Ä–µ–∑ callback
              this.onTranscriptionCallback?.(data.transcription)
              
              // –ï—Å–ª–∏ –µ—Å—Ç—å callback –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ –µ–≥–æ
              if (this.onAnalysisCallback) {
                this.onAnalysisCallback(data.analysis)
              }
              
              console.log('‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º')
            } else {
              console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', data.type)
            }
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
            this.onErrorCallback?.('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞')
          }
        }

        this.ws.onclose = () => {
          console.log('WebSocket –æ—Ç–∫–ª—é—á–µ–Ω')
          this.isConnected = false
          this.onDisconnectedCallback?.()
        }

        this.ws.onerror = (error) => {
          console.error('–û—à–∏–±–∫–∞ WebSocket:', error)
          this.onErrorCallback?.('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏')
          reject(error)
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ WebSocket:', error)
        reject(error)
      }
    })
  }

  sendAudioChunk(audioData: ArrayBuffer): void {
    if (!this.isConnected || !this.ws) {
      console.warn('‚ö†Ô∏è WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞—É–¥–∏–æ —á–∞–Ω–∫')
      return
    }

    if (audioData.byteLength === 0) {
      console.warn('‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∞—É–¥–∏–æ —á–∞–Ω–∫, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º')
      return
    }

    try {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ArrayBuffer –≤ base64
      const uint8Array = new Uint8Array(audioData)
      const binaryString = Array.from(uint8Array).map(byte => String.fromCharCode(byte)).join('')
      const base64Data = btoa(binaryString)

      const message = {
        type: 'audio_chunk',
        data: base64Data
      }

      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —á–∞–Ω–∫ —Ä–∞–∑–º–µ—Ä–æ–º ${audioData.byteLength} –±–∞–π—Ç (base64: ${base64Data.length} —Å–∏–º–≤–æ–ª–æ–≤)`)
      this.ws.send(JSON.stringify(message))
      console.log('‚úÖ –ê—É–¥–∏–æ —á–∞–Ω–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ —á–∞–Ω–∫–∞:', error)
      this.onErrorCallback?.('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö')
    }
  }

  endTranscription(): void {
    if (!this.isConnected || !this.ws) {
      console.warn('‚ö†Ô∏è WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏')
      return
    }

    try {
      const message = {
        type: 'end'
      }

      console.log('üîö –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏')
      this.ws.send(JSON.stringify(message))
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:', error)
      this.onErrorCallback?.('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏')
    }
  }

  disconnect(): void {
    if (this.ws) {
      console.log('üîå –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ')
      this.ws.close()
      this.ws = null
      this.isConnected = false
    }
  }

  // –ü—É–±–ª–∏—á–Ω—ã–π –≥–µ—Ç—Ç–µ—Ä –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  get connected(): boolean {
    return this.isConnected
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–ª–±—ç–∫–æ–≤ –±–µ–∑ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  updateCallbacks(
    onTranscription?: (text: string) => void,
    onError?: (error: string) => void,
    onConnected?: () => void,
    onDisconnected?: () => void,
    onAnalysis?: (analysis: any) => void
  ): void {
    this.onTranscriptionCallback = onTranscription
    this.onErrorCallback = onError
    this.onConnectedCallback = onConnected
    this.onDisconnectedCallback = onDisconnected
    this.onAnalysisCallback = onAnalysis
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ WebSocket –∫–ª–∏–µ–Ω—Ç–∞
export const getGlobalWebSocketClient = (
  onTranscription?: (text: string) => void,
  onError?: (error: string) => void,
  onConnected?: () => void,
  onDisconnected?: () => void,
  onAnalysis?: (analysis: any) => void
): VoiceTranscriptionClient => {
  if (!globalWebSocketClient) {
    console.log('üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≥–ª–æ–±–∞–ª—å–Ω—ã–π WebSocket –∫–ª–∏–µ–Ω—Ç')
    globalWebSocketClient = new VoiceTranscriptionClient(
      onTranscription,
      onError,
      onConnected,
      onDisconnected,
      onAnalysis
    )
  } else {
    console.log('‚ôªÔ∏è –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π WebSocket –∫–ª–∏–µ–Ω—Ç')
    globalWebSocketClient.updateCallbacks(onTranscription, onError, onConnected, onDisconnected, onAnalysis)
  }
  
  return globalWebSocketClient
}
