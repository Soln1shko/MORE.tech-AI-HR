/**
 * WebSocket –∫–ª–∏–µ–Ω—Ç –¥–ª—è TTS (Text-to-Speech) —Å–µ—Ä–≤–µ—Ä–∞
 * –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ TTS —Å–µ—Ä–≤–µ—Ä—É —á–µ—Ä–µ–∑ Nginx –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ
 */
import { getConfig } from '../config/environment'

export class TTSClient {
  private ws: WebSocket | null = null;
  private reconnectInterval: number = 5000;
  private maxReconnectAttempts: number = 5;
  private reconnectAttempts: number = 0;
  private isConnecting: boolean = false;

  constructor(private url: string = getConfig().WS_TTS_URL) {}

  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ TTS —Å–µ—Ä–≤–µ—Ä—É
   */
  connect(): Promise<void> {
    return new Promise((resolve, reject) => {
      if (this.isConnecting || (this.ws && this.ws.readyState === WebSocket.OPEN)) {
        resolve();
        return;
      }

      this.isConnecting = true;
      console.log('üé§ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ TTS —Å–µ—Ä–≤–µ—Ä—É...', this.url);

      try {
        this.ws = new WebSocket(this.url);

        this.ws.onopen = () => {
          console.log('‚úÖ TTS WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
          this.isConnecting = false;
          this.reconnectAttempts = 0;
          resolve();
        };

        this.ws.onerror = (error) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ TTS WebSocket:', error);
          this.isConnecting = false;
          reject(error);
        };

        this.ws.onclose = () => {
          console.log('üîå TTS WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
          this.isConnecting = false;
          this.scheduleReconnect();
        };

      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è TTS WebSocket:', error);
        this.isConnecting = false;
        reject(error);
      }
    });
  }

  /**
   * –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
   */
  async speak(text: string, speaker: string = 'xenia', sampleRate: number = 48000): Promise<Blob> {
    return new Promise(async (resolve, reject) => {
      // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
      if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
        try {
          await this.connect();
        } catch (error) {
          reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ TTS —Å–µ—Ä–≤–µ—Ä—É'));
          return;
        }
      }

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∂–¥—ë–º –ø–æ–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–æ—á–Ω–æ –Ω–µ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ
      try {
        await this.waitForConnection();
      } catch (error) {
        reject(error);
        return;
      }

      // –£–±–∏—Ä–∞–µ–º —Ç–∞–π–º–∞—É—Ç, —Ç–∞–∫ –∫–∞–∫ —Å–∏–Ω—Ç–µ–∑ –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
      // const timeout = setTimeout(() => {
      //   reject(new Error('Timeout: TTS —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª'));
      // }, 30000);

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ
      const messageHandler = (event: MessageEvent) => {
        if (event.data instanceof Blob) {
          this.ws!.removeEventListener('message', messageHandler);
          console.log('üéµ –ü–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ –æ—Ç TTS —Å–µ—Ä–≤–µ—Ä–∞:', event.data.size, '–±–∞–π—Ç');
          resolve(event.data);
        }
      };

      this.ws!.addEventListener('message', messageHandler);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∏–Ω—Ç–µ–∑ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
      const request = {
        text: text,
        speaker: speaker,
        sample_rate: sampleRate
      };

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ TTS —Å–∏–Ω—Ç–µ–∑:', request);
      this.ws!.send(JSON.stringify(request));
    });
  }

  /**
   * –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  private waitForConnection(timeout: number = 5000): Promise<void> {
    return new Promise((resolve, reject) => {
      if (this.ws && this.ws.readyState === WebSocket.OPEN) {
        resolve();
        return;
      }

      const timeoutId = setTimeout(() => {
        reject(new Error('Timeout –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è'));
      }, timeout);

      const checkConnection = () => {
        if (this.ws && this.ws.readyState === WebSocket.OPEN) {
          clearTimeout(timeoutId);
          resolve();
        } else if (this.ws && this.ws.readyState === WebSocket.CLOSED) {
          clearTimeout(timeoutId);
          reject(new Error('WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ'));
        } else {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 100ms
          setTimeout(checkConnection, 100);
        }
      };

      checkConnection();
    });
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  private scheduleReconnect() {
    if (this.reconnectAttempts < this.maxReconnectAttempts) {
      this.reconnectAttempts++;
      console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ TTS —Å–µ—Ä–≤–µ—Ä—É ${this.reconnectAttempts}/${this.maxReconnectAttempts} —á–µ—Ä–µ–∑ ${this.reconnectInterval}ms`);
      
      setTimeout(() => {
        this.connect().catch((error) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ TTS —Å–µ—Ä–≤–µ—Ä—É:', error);
        });
      }, this.reconnectInterval);
    } else {
      console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ TTS —Å–µ—Ä–≤–µ—Ä—É');
    }
  }

  /**
   * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
   */
  disconnect() {
    if (this.ws) {
      this.ws.close();
      this.ws = null;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  isConnected(): boolean {
    return this.ws !== null && this.ws.readyState === WebSocket.OPEN;
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä TTS –∫–ª–∏–µ–Ω—Ç–∞
export const ttsClient = new TTSClient();
