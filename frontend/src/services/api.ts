// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—ç–∫–µ–Ω–¥–æ–º
import { getConfig } from '../config/environment'

const API_BASE_URL = getConfig().API_BASE_URL

export interface LoginData {
  email: string
  password: string
}

export interface RegisterData {
  email: string
  password: string
  firstName: string
  lastName: string
  telegram: string
  resume?: File
}

export interface ApiResponse<T = any> {
  success: boolean
  data?: T
  error?: string
  message?: string
}

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const loginUser = async (data: LoginData): Promise<ApiResponse> => {
  try {
    const response = await fetch(`${API_BASE_URL}/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data),
    })

    const result = await response.json()

    if (response.ok) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏ —Ä–æ–ª—å –≤ localStorage
      if (result.token) {
        localStorage.setItem('authToken', result.token)
        localStorage.setItem('isAuthenticated', 'true')
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        if (result.role) {
          localStorage.setItem('userRole', result.role)
        }
      }
      
      return {
        success: true,
        data: result
      }
    } else {
      return {
        success: false,
        error: result.message || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
    }
  }
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const registerUser = async (data: RegisterData): Promise<ApiResponse> => {
  try {
    const formData = new FormData()
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    formData.append('email', data.email)
    formData.append('password', data.password)
    formData.append('name', data.firstName)
    formData.append('surname', data.lastName)
    formData.append('telegram_id', data.telegram)
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ
    if (data.resume) {
      formData.append('resume', data.resume)
    }

    const response = await fetch(`${API_BASE_URL}/register`, {
      method: 'POST',
      body: formData,
    })

    const result = await response.json()

    if (response.ok) {
      return {
        success: true,
        data: result,
        message: result.message
      }
    } else {
      return {
        success: false,
        error: result.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
    }
  }
}

// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Ä–µ–∑—é–º–µ (–º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
export const uploadResume = async (file: File): Promise<ApiResponse> => {
  console.log('–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—é–º–µ:', {
    name: file.name,
    size: file.size,
    type: file.type
  })
  
  return {
    success: true,
    data: {
      fileId: `resume_${Date.now()}`,
      fileName: file.name,
      fileUrl: `${API_BASE_URL}/uploads/resumes/${file.name}`
    }
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
export const checkAuth = (): boolean => {
  const token = localStorage.getItem('authToken')
  const isAuth = localStorage.getItem('isAuthenticated')
  return !!(token && isAuth === 'true')
}

// –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
export const logout = (): void => {
  localStorage.removeItem('authToken')
  localStorage.removeItem('isAuthenticated')
  localStorage.removeItem('userRole')
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
export const getAuthToken = (): string | null => {
  return localStorage.getItem('authToken')
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getUserRole = (): string | null => {
  return localStorage.getItem('userRole')
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏
export const uploadCompanyAvatar = async (file: File): Promise<ApiResponse> => {
  try {
    const token = getAuthToken()
    if (!token) {
      return {
        success: false,
        error: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      }
    }

    const formData = new FormData()
    formData.append('avatar', file)

    const response = await fetch(`${API_BASE_URL}/company/avatar`, {
      method: 'POST',
      headers: {
        'x-access-token': token,
      },
      body: formData,
    })

    const result = await response.json()

    if (response.ok) {
      return {
        success: true,
        data: result
      }
    } else {
      return {
        success: false,
        error: result.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏'
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∫–∏:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
    }
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getUserProfile = async (): Promise<ApiResponse> => {
  try {
    const token = getAuthToken()
    if (!token) {
      return {
        success: false,
        error: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      }
    }

    const response = await fetch(`${API_BASE_URL}/profile`, {
      method: 'GET',
      headers: {
        'x-access-token': token,
        'Content-Type': 'application/json',
      },
    })

    const result = await response.json()

    if (response.ok) {
      return {
        success: true,
        data: result
      }
    } else {
      return {
        success: false,
        error: result.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è'
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
    }
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getUserInterviews = async (): Promise<ApiResponse> => {
  try {
    const token = getAuthToken()
    if (!token) {
      return {
        success: false,
        error: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      }
    }

    const response = await fetch(`${API_BASE_URL}/user-interviews`, {
      method: 'GET',
      headers: {
        'x-access-token': token,
        'Content-Type': 'application/json',
      },
    })

    const result = await response.json()

    if (response.ok) {
      return {
        success: true,
        data: result.interviews || []
      }
    } else {
      return {
        success: false,
        error: result.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é'
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
    }
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
export const getUserApplications = async (): Promise<ApiResponse> => {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
    
    // 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const interviewsResponse = await getUserInterviews()
    console.log('üìû –û—Ç–≤–µ—Ç –æ—Ç getUserInterviews:', interviewsResponse)
    
    if (!interviewsResponse.success) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é:', interviewsResponse.error)
      return interviewsResponse
    }

    const interviews = interviewsResponse.data || []
    console.log('üîç –ü–æ–ª—É—á–µ–Ω—ã –∏–Ω—Ç–µ—Ä–≤—å—é:', interviews.length, interviews)
    
    // 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö
    const vacanciesResponse = await getAllVacancies(1, 100)
    const vacancies = vacanciesResponse.success ? vacanciesResponse.data?.vacancies || [] : []
    
    // 3. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–∞–Ω–∏—è—Ö
    const companiesResponse = await getAllCompanies(1, 50)
    const companies = companiesResponse.success ? companiesResponse.data?.companies || [] : []

    // 4. –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    const applications = interviews.map((interview: any) => {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ ID (ObjectId vs String)
      const interviewVacancyId = typeof interview.vacancy_id === 'object' && interview.vacancy_id.$oid 
        ? interview.vacancy_id.$oid 
        : interview.vacancy_id
      
      const vacancy = vacancies.find((v: any) => {
        const vacancyId = typeof v._id === 'object' && v._id.$oid ? v._id.$oid : v._id
        return vacancyId === interviewVacancyId
      })
      
      const company = companies.find((c: any) => {
        const companyId = typeof c._id === 'object' && c._id.$oid ? c._id.$oid : c._id
        const vacancyCompanyId = typeof vacancy?.company_id === 'object' && vacancy?.company_id.$oid 
          ? vacancy?.company_id.$oid 
          : vacancy?.company_id
        return companyId === vacancyCompanyId
      })
      
      return {
        _id: typeof interview._id === 'object' && interview._id.$oid ? interview._id.$oid : interview._id,
        status: interview.status,
        created_at: interview.created_at,
        resume_score: interview.resume_score,
        vacancy_title: vacancy?.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è',
        vacancy_grade: vacancy?.grade || '',
        vacancy_work_field: vacancy?.work_field || '',
        company_name: company?.company_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è'
      }
    })

    console.log('üìä –ò—Ç–æ–≥–æ–≤—ã–µ –∑–∞—è–≤–∫–∏:', applications.length, applications)

    return {
      success: true,
      data: applications
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
    }
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
export const getCompanyProfile = async (): Promise<ApiResponse> => {
  try {
    const token = getAuthToken()
    if (!token) {
      return {
        success: false,
        error: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      }
    }

    const response = await fetch(`${API_BASE_URL}/company`, {
      method: 'GET',
      headers: {
        'x-access-token': token,
        'Content-Type': 'application/json',
      },
    })

    const result = await response.json()

    if (response.ok) {
      return {
        success: true,
        data: result
      }
    } else {
      return {
        success: false,
        error: result.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∫–æ–º–ø–∞–Ω–∏–∏'
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –∫–æ–º–ø–∞–Ω–∏–∏:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
    }
  }
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏
export interface CompanyRegisterData {
  companyName: string
  inn: string
  ogrn: string
  legalAddress: string
  actualAddress: string
  contactPersonName: string
  contactPersonPosition: string
  email: string
  phone: string
  password: string
  website?: string
  description?: string
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ (—Å–æ–≥–ª–∞—Å–Ω–æ –±—ç–∫–µ–Ω–¥—É)
export interface VacancyData {
  _id?: string
  company_id?: string
  title: string
  grade: string
  required_skills: string[]
  min_experience: number
  max_experience: number
  work_field: string
  work_address?: string
  description?: string
  optional_skills?: string[]
  questions?: any[]
  created_at?: string
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏
export interface CreateVacancyData {
  title: string
  grade: string
  required_skills: string[]
  min_experience: number
  max_experience: number
  work_field: string
  work_address?: string
  description?: string
  optional_skills?: string[]
  questions?: any[]
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
export const registerCompany = async (data: CompanyRegisterData): Promise<ApiResponse> => {
  try {
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
    const companyData = {
      company_name: data.companyName,  // –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ *
      inn: data.inn,                  // –ò–ù–ù *
      ogrn: data.ogrn,               // –û–ì–†–ù *
      legal_address: data.legalAddress, // –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å *
      email: data.email,             // Email *
      password: data.password        // –ø–∞—Ä–æ–ª—å
    }

    const response = await fetch(`${API_BASE_URL}/register/company`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(companyData),
    })

    const result = await response.json()

    if (response.ok) {
      return {
        success: true,
        data: result,
        message: result.message
      }
    } else {
      return {
        success: false,
        error: result.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏'
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
    }
  }
}

// ===================
// –í–ê–ö–ê–ù–°–ò–ò
// ===================

// –°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
export const createVacancy = async (data: CreateVacancyData): Promise<ApiResponse> => {
  try {
    const token = getAuthToken()
    if (!token) {
      return {
        success: false,
        error: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      }
    }

    const response = await fetch(`${API_BASE_URL}/vacancies/create`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-access-token': token,
      },
      body: JSON.stringify(data),
    })

    const result = await response.json()

    if (response.ok) {
      return {
        success: true,
        data: result
      }
    } else {
      return {
        success: false,
        error: result.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏'
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
    }
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π –∫–æ–º–ø–∞–Ω–∏–∏
export const getCompanyVacancies = async (page: number = 1, perPage: number = 20): Promise<ApiResponse> => {
  try {
    const token = getAuthToken()
    if (!token) {
      return {
        success: false,
        error: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      }
    }

    // –î–ª—è –∫–æ–º–ø–∞–Ω–∏–π –ø–æ–ª—É—á–∞–µ–º –∏—Ö ID –∏–∑ —Ç–æ–∫–µ–Ω–∞ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏
    const response = await fetch(`${API_BASE_URL}/vacancies?page=${page}&per_page=${perPage}`, {
      method: 'GET',
      headers: {
        'x-access-token': token,
        'Content-Type': 'application/json',
      },
    })

    const result = await response.json()

    if (response.ok) {
      return {
        success: true,
        data: result
      }
    } else {
      return {
        success: false,
        error: result.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π'
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
    }
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
export const updateVacancy = async (vacancyId: string, data: Partial<CreateVacancyData>): Promise<ApiResponse> => {
  try {
    const token = getAuthToken()
    if (!token) {
      return {
        success: false,
        error: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      }
    }

    const response = await fetch(`${API_BASE_URL}/vacancies/${vacancyId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'x-access-token': token,
      },
      body: JSON.stringify(data),
    })

    const result = await response.json()

    if (response.ok) {
      return {
        success: true,
        data: result
      }
    } else {
      return {
        success: false,
        error: result.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏'
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
    }
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ (—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
export const deleteVacancy = async (vacancyId: string): Promise<ApiResponse> => {
  try {
    const token = getAuthToken()
    if (!token) {
      return {
        success: false,
        error: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      }
    }

    const response = await fetch(`${API_BASE_URL}/vacancies/${vacancyId}`, {
      method: 'DELETE',
      headers: {
        'x-access-token': token,
        'Content-Type': 'application/json',
      },
    })

    const result = await response.json()

    if (response.ok) {
      return {
        success: true,
        data: result
      }
    } else {
      return {
        success: false,
        error: result.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏'
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
    }
  }
}

// ===================
// –í–û–ü–†–û–°–´ –ö –í–ê–ö–ê–ù–°–ò–Ø–ú
// ===================

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏
export const uploadVacancyQuestions = async (vacancyId: string, questions: any[]): Promise<ApiResponse> => {
  try {
    const token = getAuthToken()
    if (!token) {
      return {
        success: false,
        error: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      }
    }

    const response = await fetch(`${API_BASE_URL}/vacancies/${vacancyId}/questions`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-access-token': token,
      },
      body: JSON.stringify({ questions }),
    })

    const result = await response.json()

    if (response.ok) {
      return {
        success: true,
        data: result
      }
    } else {
      return {
        success: false,
        error: result.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤'
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
    }
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏
export const getVacancyQuestions = async (vacancyId: string): Promise<ApiResponse> => {
  try {
    const token = getAuthToken()
    if (!token) {
      return {
        success: false,
        error: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      }
    }

    const response = await fetch(`${API_BASE_URL}/vacancies/${vacancyId}/questions`, {
      method: 'GET',
      headers: {
        'x-access-token': token,
        'Content-Type': 'application/json',
      },
    })

    const result = await response.json()

    if (response.ok) {
      return {
        success: true,
        data: result
      }
    } else {
      return {
        success: false,
        error: result.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤'
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
    }
  }
}

// ===================
// –ö–û–ú–ü–ê–ù–ò–ò –ò –û–ë–©–ò–ï –í–ê–ö–ê–ù–°–ò–ò (–¥–ª—è Welcome Screen)
// ===================

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–∞–Ω–∏–π
export const getAllCompanies = async (page: number = 1, perPage: number = 50): Promise<ApiResponse> => {
  try {
    const token = getAuthToken()
    if (!token) {
      return {
        success: false,
        error: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      }
    }

    const response = await fetch(`${API_BASE_URL}/companies?page=${page}&per_page=${perPage}`, {
      method: 'GET',
      headers: {
        'x-access-token': token,
        'Content-Type': 'application/json',
      },
    })

    const result = await response.json()

    if (response.ok) {
      return {
        success: true,
        data: result
      }
    } else {
      return {
        success: false,
        error: result.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π'
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–π:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
    }
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
export const getAllVacancies = async (page: number = 1, perPage: number = 100, companyId?: string): Promise<ApiResponse> => {
  try {
    const token = getAuthToken()
    if (!token) {
      return {
        success: false,
        error: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      }
    }

    let url = `${API_BASE_URL}/vacancies?page=${page}&per_page=${perPage}`
    if (companyId) {
      url += `&company_id=${companyId}`
    }

    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'x-access-token': token,
        'Content-Type': 'application/json',
      },
    })

    const result = await response.json()

    if (response.ok) {
      return {
        success: true,
        data: result
      }
    } else {
      return {
        success: false,
        error: result.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π'
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
    }
  }
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –±—ç–∫–µ–Ω–¥–∞
export interface CompanyFromBackend {
  _id: string
  company_name: string
  inn: string
  ogrn: string
  legal_address: string
  email: string
  role: string
}

// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const downloadUserResume = async (): Promise<void> => {
  try {
    const token = getAuthToken()
    if (!token) {
      throw new Error('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
    }

    const response = await fetch(`${API_BASE_URL}/download-resume`, {
      method: 'GET',
      headers: {
        'x-access-token': token,
      },
    })

    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ä–µ–∑—é–º–µ')
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –æ—Ç–≤–µ—Ç–∞
    const contentDisposition = response.headers.get('Content-Disposition')
    let filename = 'document' // –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–º—è –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    
    if (contentDisposition) {
      const filenameMatch = contentDisposition.match(/filename="(.+)"/)
      if (filenameMatch) {
        filename = filenameMatch[1]
      }
    }
    
    // –ï—Å–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –ø–æ–ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏–∑ Content-Type
    if (filename === 'document') {
      const contentType = response.headers.get('Content-Type')
      if (contentType?.includes('pdf')) {
        filename = 'document.pdf'
      } else if (contentType?.includes('msword')) {
        filename = 'document.doc'
      } else if (contentType?.includes('wordprocessingml')) {
        filename = 'document.docx'
      }
    }

    // –°–æ–∑–¥–∞–µ–º blob –∏–∑ –æ—Ç–≤–µ—Ç–∞
    const blob = await response.blob()
    
    // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    const url = window.URL.createObjectURL(blob)
    const link = document.createElement('a')
    link.href = url
    link.download = filename
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ DOM, –∫–ª–∏–∫–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    
    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
    window.URL.revokeObjectURL(url)
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ä–µ–∑—é–º–µ:', error)
    throw error
  }
}

// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (–¥–ª—è HR)
export const downloadCandidateResume = async (userId: string): Promise<void> => {
  try {
    const token = getAuthToken()
    if (!token) {
      throw new Error('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
    }

    const response = await fetch(`${API_BASE_URL}/download-candidate-resume?user_id=${userId}`, {
      method: 'GET',
      headers: {
        'x-access-token': token,
      },
    })

    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ä–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞')
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –æ—Ç–≤–µ—Ç–∞
    const contentDisposition = response.headers.get('Content-Disposition')
    let filename = 'resume' // –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–º—è –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    
    if (contentDisposition) {
      const filenameMatch = contentDisposition.match(/filename="(.+)"/)
      if (filenameMatch) {
        filename = filenameMatch[1]
      }
    }
    
    // –ï—Å–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –ø–æ–ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏–∑ Content-Type
    if (filename === 'resume') {
      const contentType = response.headers.get('Content-Type')
      if (contentType?.includes('pdf')) {
        filename = 'resume.pdf'
      } else if (contentType?.includes('msword')) {
        filename = 'resume.doc'
      } else if (contentType?.includes('wordprocessingml')) {
        filename = 'resume.docx'
      }
    }

    // –°–æ–∑–¥–∞–µ–º blob –∏–∑ –æ—Ç–≤–µ—Ç–∞
    const blob = await response.blob()
    
    // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    const url = window.URL.createObjectURL(blob)
    const link = document.createElement('a')
    link.href = url
    link.download = filename
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ DOM, –∫–ª–∏–∫–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    
    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
    window.URL.revokeObjectURL(url)
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ä–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:', error)
    throw error
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const updateUserProfile = async (data: { name?: string; surname?: string; telegram_id?: string }): Promise<ApiResponse> => {
  try {
    const token = getAuthToken()
    if (!token) {
      return {
        success: false,
        error: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      }
    }

    const response = await fetch(`${API_BASE_URL}/user/updateprofile`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'x-access-token': token,
      },
      body: JSON.stringify(data),
    })

    const result = await response.json()

    if (response.ok) {
      return {
        success: true,
        data: result
      }
    } else {
      return {
        success: false,
        error: result.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è'
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
    }
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const updateUserResume = async (file: File): Promise<ApiResponse> => {
  try {
    const token = getAuthToken()
    if (!token) {
      return {
        success: false,
        error: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      }
    }

    const formData = new FormData()
    formData.append('resume', file)

    const response = await fetch(`${API_BASE_URL}/update-resume`, {
      method: 'POST',
      headers: {
        'x-access-token': token,
      },
      body: formData,
    })

    const result = await response.json()

    if (response.ok) {
      return {
        success: true,
        data: result
      }
    } else {
      return {
        success: false,
        error: result.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—é–º–µ'
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–∑—é–º–µ:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
    }
  }
}

// ===================
// –°–û–ë–ï–°–ï–î–û–í–ê–ù–ò–Ø
// ===================

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
export interface InterviewData {
  interview_id?: string
  mlinterview_id?: string
  question?: string
  status?: string
  current_question?: string
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—é–º–µ
export interface ResumeCheckResult {
  success: boolean
  resume_score: number
  can_proceed: boolean
  message: string
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—é–º–µ –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é
export const checkResume = async (vacancyId: string): Promise<ApiResponse<ResumeCheckResult>> => {
  try {
    const token = getAuthToken()
    if (!token) {
      return {
        success: false,
        error: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      }
    }

    const response = await fetch(`${API_BASE_URL}/check-resume`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-access-token': token,
      },
      body: JSON.stringify({ vacancy_id: vacancyId }),
    })

    const result = await response.json()

    if (response.ok) {
      return {
        success: true,
        data: result
      }
    } else {
      return {
        success: false,
        error: result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∑—é–º–µ'
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∑—é–º–µ:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
    }
  }
}

// –ù–∞—á–∞–ª–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è (process_ad_save_resume)
export const startInterview = async (vacancyId: string): Promise<ApiResponse> => {
  try {
    const token = getAuthToken()
    if (!token) {
      return {
        success: false,
        error: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      }
    }

    const response = await fetch(`${API_BASE_URL}/convert-resume`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-access-token': token,
      },
      body: JSON.stringify({ vacancy_id: vacancyId }),
    })

    const result = await response.json()

    if (response.ok) {
      return {
        success: true,
        data: {
          interview_id: result.interview_id,
          message: result.message
        }
      }
    } else {
      return {
        success: false,
        error: result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è'
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
    }
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
export const saveInterviewAnswer = async (
  interviewId: string,
  mlinterviewId: string,
  question: string,
  answerText: string,
  analysis?: any
): Promise<ApiResponse> => {
  try {
    const token = getAuthToken()
    if (!token) {
      return {
        success: false,
        error: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      }
    }

    const response = await fetch(`${API_BASE_URL}/interviews/answer`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-access-token': token,
      },
      body: JSON.stringify({
        interview_id: interviewId,
        mlinterview_id: mlinterviewId,
        question: question,
        answer_text: answerText,
        analysis: analysis
      }),
    })

    const result = await response.json()

    if (response.ok) {
      return {
        success: true,
        data: result
      }
    } else {
      return {
        success: false,
        error: result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞'
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
    }
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é (–ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è)
export const deleteInterview = async (interviewId: string): Promise<ApiResponse> => {
  try {
    const token = getAuthToken()
    if (!token) {
      return {
        success: false,
        error: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      }
    }

    const response = await fetch(`${API_BASE_URL}/interviews/${interviewId}`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
        'x-access-token': token,
      }
    })

    const result = await response.json()

    if (response.ok) {
      return {
        success: true,
        data: result
      }
    } else {
      return {
        success: false,
        error: result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é'
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
    }
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
export const getInterviewQnA = async (interviewId: string): Promise<ApiResponse> => {
  try {
    const token = getAuthToken()
    if (!token) {
      return {
        success: false,
        error: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      }
    }

    const response = await fetch(`${API_BASE_URL}/interviews/${interviewId}/qna`, {
      method: 'GET',
      headers: {
        'x-access-token': token,
        'Content-Type': 'application/json',
      },
    })

    const result = await response.json()

    if (response.ok) {
      return {
        success: true,
        data: result
      }
    } else {
      return {
        success: false,
        error: result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è'
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
    }
  }
}


// ===================
// –ö–ê–ù–î–ò–î–ê–¢–´
// ===================

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
export interface Candidate {
  _id: string
  user_id: string
  vacancy_id: string
  status: string
  resume_analysis?: any
  resume_score?: number
  interview_analysis?: any
  user_name?: string
  user_email?: string
  created_at?: string
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
export interface CandidateAnswer {
  _id: string
  interview_id: string
  mlinterview_id: string
  question: string
  answer_text: string
  status: string
  report?: any
  recommendation?: any
  voice_analysis?: {
    tags: string[]
    scores: {
      confidence: number
      stress_resistance: number
      communication: number
      energy: number
    }
    overall_score?: number
  }
}

// –ü–æ–ª—É—á–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
export async function getInterviewsForVacancy(vacancyId: string, page: number = 1, perPage: number = 20) {
  try {
    const token = getAuthToken()
    if (!token) {
      return {
        success: false,
        error: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      }
    }

    const response = await fetch(`${API_BASE_URL}/vacancies/${vacancyId}/interviews?page=${page}&per_page=${perPage}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'x-access-token': token,
      },
    })

    const result = await response.json()

    if (response.ok) {
      return {
        success: true,
        data: result
      }
    } else {
      return {
        success: false,
        error: result.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π'
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
    }
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ (—Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
export async function getCandidatesForVacancy(vacancyId: string, page: number = 1, perPage: number = 20) {
  try {
    const token = getAuthToken()
    if (!token) {
      return {
        success: false,
        error: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      }
    }

    const response = await fetch(`${API_BASE_URL}/vacancies/${vacancyId}/candidates?page=${page}&per_page=${perPage}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'x-access-token': token,
      },
    })

    const result = await response.json()

    if (response.ok) {
      return {
        success: true,
        data: result
      }
    } else {
      return {
        success: false,
        error: result.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤'
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
    }
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
export async function getCandidateAnswers(interviewId: string) {
  try {
    const token = getAuthToken()
    if (!token) {
      return {
        success: false,
        error: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      }
    }

    const response = await fetch(`${API_BASE_URL}/interviews/${interviewId}/qna`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'x-access-token': token,
      },
    })

    const result = await response.json()

    if (response.ok) {
      return {
        success: true,
        data: result
      }
    } else {
      return {
        success: false,
        error: result.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞'
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
    }
  }
}

// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
export async function updateCandidateStatus(interviewId: string, status: 'rejected' | 'completed' | 'test_task' | 'finalist' | 'offer') {
  try {
    const token = getAuthToken()
    if (!token) {
      return {
        success: false,
        error: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      }
    }

    const response = await fetch(`${API_BASE_URL}/interviews/change-status`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'x-access-token': token,
      },
      body: JSON.stringify({ 
        interview_id: interviewId,
        status: status 
      })
    })

    const result = await response.json()

    if (response.ok) {
      return {
        success: true,
        data: result
      }
    } else {
      return {
        success: false,
        error: result.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞'
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
    }
  }
}

// ===== COMPANY PROFILE API =====

export interface CompanyProfileData {
  _id?: string
  company_id: string
  // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (company_name –ø—Ä–∏—Ö–æ–¥–∏—Ç –∏–∑ companies —Ç–∞–±–ª–∏—Ü—ã)
  basic_info: {
    company_name: string      // –ò–∑ companies —Ç–∞–±–ª–∏—Ü—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è –∏–∑ API)
    website: string
    industry: string
    is_it_accredited: boolean
    logo_url: string
  }
  // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫)
  detailed_description: {
    about_company: string      // –ß–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –∫–æ–º–ø–∞–Ω–∏—è
    about_team: string         // –û –∫–æ–º–∞–Ω–¥–µ  
    team_size: string          // –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã
    corporate_culture: string  // –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –∫—É–ª—å—Ç—É—Ä–∞ –∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏
    work_conditions: string    // –£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã
  }
  // –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (email –∏ address –ø—Ä–∏—Ö–æ–¥—è—Ç –∏–∑ companies —Ç–∞–±–ª–∏—Ü—ã)
  contact_info: {
    email: string             // –ò–∑ companies —Ç–∞–±–ª–∏—Ü—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è –∏–∑ API)
    address: string           // –ò–∑ companies —Ç–∞–±–ª–∏—Ü—ã –∫–∞–∫ legal_address (—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è –∏–∑ API)
    phone: string
    city: string
    country: string
  }
  // –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏ –ª—å–≥–æ—Ç—ã
  benefits: string[]
  // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
  social_links: {
    linkedin: string
    telegram: string
    vk: string
    facebook: string
  }
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  additional_info: {
    founded_year: number | null
    employee_count: string
    specializations: string[]
    office_photos: string[]
    company_values: string[]
  }
  created_at?: string
  updated_at?: string
}

export const getCompanyProfileData = async (): Promise<CompanyProfileData> => {
  try {
    const token = getAuthToken()
    if (!token) {
      throw new Error('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
    }

    const response = await fetch(`${API_BASE_URL}/company-profile`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'x-access-token': token,
      },
    })

    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –∫–æ–º–ø–∞–Ω–∏–∏')
    }

    const data = await response.json()
    return data
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –∫–æ–º–ø–∞–Ω–∏–∏:', error)
    throw error
  }
}

export const updateCompanyProfileData = async (profileData: Partial<CompanyProfileData>): Promise<CompanyProfileData> => {
  try {
    const token = getAuthToken()
    if (!token) {
      throw new Error('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
    }

    const response = await fetch(`${API_BASE_URL}/company-profile`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'x-access-token': token,
      },
      body: JSON.stringify(profileData),
    })

    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –∫–æ–º–ø–∞–Ω–∏–∏')
    }

    const data = await response.json()
    return data.profile
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –∫–æ–º–ø–∞–Ω–∏–∏:', error)
    throw error
  }
}

export const getPublicCompanyProfileData = async (companyId: string): Promise<Partial<CompanyProfileData>> => {
  try {
    const response = await fetch(`${API_BASE_URL}/company-profile/public/${companyId}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    })

    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –∫–æ–º–ø–∞–Ω–∏–∏')
    }

    const data = await response.json()
    return data
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –∫–æ–º–ø–∞–Ω–∏–∏:', error)
    throw error
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–∞–Ω–∏–π —Å –∏—Ö –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
export const getAllCompaniesWithProfiles = async (): Promise<{companies: CompanyFromBackend[], profiles: Record<string, Partial<CompanyProfileData>>}> => {
  try {
    const token = getAuthToken()
    if (!token) {
      throw new Error('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–ø–∞–Ω–∏–π
    const companiesResponse = await fetch(`${API_BASE_URL}/companies?per_page=100`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'x-access-token': token,
      },
    })

    if (!companiesResponse.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π')
    }

    const companiesData = await companiesResponse.json()
    const companies = companiesData.companies || []

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–∞–Ω–∏–π
    const profiles: Record<string, Partial<CompanyProfileData>> = {}
    
    await Promise.all(
      companies.map(async (company: CompanyFromBackend) => {
        try {
          const profile = await getPublicCompanyProfileData(company._id)
          profiles[company._id] = profile
        } catch (error) {
          console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${company._id}:`, error)
          // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å
          profiles[company._id] = {
            basic_info: {
              company_name: company.company_name || '',
              website: '',
              industry: '',
              is_it_accredited: false,
              logo_url: ''
            },
            detailed_description: {
              about_company: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞',
              about_team: '',
              team_size: '',
              corporate_culture: '',
              work_conditions: ''
            },
            contact_info: {
              email: company.email || '',
              address: company.legal_address || '',
              phone: '',
              city: '',
              country: ''
            },
            benefits: [],
            social_links: {
              linkedin: '',
              telegram: '',
              vk: '',
              facebook: ''
            },
            additional_info: {
              founded_year: null,
              employee_count: '',
              specializations: [],
              office_photos: [],
              company_values: []
            }
          }
        }
      })
    )

    return { companies, profiles }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–π —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏:', error)
    throw error
  }
}