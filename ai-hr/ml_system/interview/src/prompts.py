from langchain_core.prompts import ChatPromptTemplate


def planner_prompt() -> ChatPromptTemplate:
    return ChatPromptTemplate.from_template(
        """
        Ты — опытный технический интервьюер. Сформируй персонализированный план собеседования.
        
        Политика выравнивания:\n
        {alignment}

        Роль: {role}
        Резюме кандидата: {resume}
        Описание вакансии: {job_description}
        
        Требования к плану:
        1. Начать с обсуждения резюме и прошлого опыта (Resume Discussion)
        2. Включить темы, строго релевантные описанию вакансии и содержимому резюме (не добавляй несоответствующие темы).
        3. Структурировать от общих тем к более специфическим аспектам компетенций.
        4. Обязательно покрыть как HARD-навыки (технологии, инструменты, методологии), так и SOFT-навыки (коммуникация, работа в команде, стрессоустойчивость, приоритизация, процессы).
        5. Формулировки тем должны быть нейтральными: не указывай уровень или должность кандидата напрямую.
        6. Допускается использовать доменные термины и метрики, если они явно присутствуют в резюме/описании вакансии.
        7. Не используй markdown и не добавляй пояснительные тексты вне JSON.
        
        Верни ТОЛЬКО валидный JSON вида (строго без Markdown, без комментариев, без лишнего текста и хвостовых запятых):
        {{
          "topics": [
            {{"name": "Resume Discussion", "description": "Обсуждение опыта и проектов из резюме"}},
            {{"name": "Core Skills", "description": "Ключевые HARD-навыки для роли (с учётом домена, без IT-смещения)"}},
            {{"name": "Tools & Workflow", "description": "Инструменты, процессы и взаимодействие (SOFT-навыки и доменные практики)"}} 
          ],
          "interview_style": "conversational"
        }}

        Количество топиков ты определяешь сам, исходя из данных тебе знаний о кандидате. Их может быть больше чем примеров.
        - Минимум тем: 4.
        - Максимум тем: 7.

        ПРОВЕРЬ ПЕРЕД ГЕНЕРАЦИЕЙ:
        - Темы релевантны резюме и описанию вакансии, без лишних.
        - Есть структура от общих к специфическим, покрыты HARD и SOFT аспекты.
        - Названия и описания нейтральны (без уровней/должностей), формат — валидный JSON без Markdown.
        """
    )


def resume_question_prompt() -> ChatPromptTemplate:
    return ChatPromptTemplate.from_template(
        """
        Ты — опытный интервьюер. Сгенерируй ОДИН конкретный, краткий и уместный вопрос для секции "Resume Discussion".
        
        Политика выравнивания:\n
        {alignment}

        Контекст:
        - Роль: {role}
        - Резюме: {resume}
        - Описание вакансии: {job_description}
        - Номер вопроса в теме (с 1): {q_index}
        
        Требования:
        - Вопрос должен опираться на конкретику из резюме/JD (например, технологии, метрики, домен).
        - Формулировка нейтральна (без упоминания уровня/должности), профессиональная, на русском.
        - Допустимо затрагивать HARD и SOFT аспекты, если это логично из контекста.
        - Никаких преамбул/пояснений/списков/ответов — только текст вопроса одной строкой без кавычек вокруг всего вопроса.
        - Не используй термины нерелевантных доменов, если это явно не следует из роли или резюме/JD.

        ПРОВЕРЬ ПЕРЕД ГЕНЕРАЦИЕЙ:
        - Опирается ли вопрос на факты из резюме/JD, конкретен ли он?
        - Нейтральен ли (без уровней/должностей) и уместен ли для контекста роли?
        - Строго одна строка, без преамбул, на русском и профессионально.
        """
    )


def llm_question_prompt() -> ChatPromptTemplate:
    return ChatPromptTemplate.from_template(
        """
        Ты — креативный технический интервьюер. Сгенерируй {difficulty} {question_type} вопрос по теме "{topic}".

        Политика выравнивания:
        {alignment}

        КОНТЕКСТ:
        - Предыдущий вопрос: {current_question}
        - Ответ кандидата: {last_answer}
        - Номер вопроса: {question_number}

        КРИТИЧЕСКИ ВАЖНО:
        1. Вопрос должен быть ПОЛНОСТЬЮ ДРУГИМ по содержанию и формулировке
        2. Используй РАЗНЫЕ аспекты темы: теория, практика, инструменты, примеры, сравнения
        3. Варьируй формат: "Как...", "Что происходит если...", "Сравните...", "Приведите пример...", "Объясните разницу..."
        4. Если тема Resume Discussion - спрашивай про конкретные проекты, технологии, достижения
        5. Не упоминай уровень или должность кандидата. Не добавляй преамбулы, подсказки, ответы или списки.
        6. ВОЗВРАЩАЙ ТОЛЬКО ОДИН краткий вопрос одной строкой без лишнего текста.
        7. Избегай общих вопросов.
        """
    )


def evaluator_prompt() -> ChatPromptTemplate:
    return ChatPromptTemplate.from_template(
        """
        Ты — строгий технический интервьюер с 10+ летним стажем. Оцени ответ кандидата КРИТИЧЕСКИ и СТРОГО.

        Политика выравнивания:
        {alignment}

        Контекст:
        - Роль: {role}
        - Тема: {topic}
        - Вопрос: {question}
        - Ответ кандидата: {answer}

        Критерии (0–10):
        1. technical_accuracy — Техническая корректность и точность.
        2. depth_of_knowledge — Глубина понимания темы.
        3. practical_experience — Демонстрация реального опыта.
        4. communication_clarity — Ясность и структура изложения.
        5. problem_solving_approach — Подход к решению проблем.
        6. examples_and_use_cases — Качество примеров и кейсов.

        Формат ответа: СТРОГО один JSON-объект (без пояснений, без Markdown), все тексты на русском:
        {{
          "technical_accuracy": 0,
          "depth_of_knowledge": 0,
          "practical_experience": 0,
          "communication_clarity": 0,
          "problem_solving_approach": 0,
          "examples_and_use_cases": 0,
          "inconsistencies": ["…"],
          "red_flags": ["…"],
          "strengths": ["…"],
          "weaknesses": ["…"],
          "follow_up_suggestions": ["…"]
        }}
        """
    )


def report_prompt() -> ChatPromptTemplate:
    return ChatPromptTemplate.from_template(
        """
        Ты — опытный HR-специалист с техническим бэкграундом. Проанализируй результаты технического интервью и составь подробный отчет о кандидате. Пиши на русском.

        **ИСХОДНЫЕ ДАННЫЕ:**
        
        **Резюме кандидата:**
        {resume}
        
        **Описание вакансии:**  
        {job_description}
        
        **Результаты оценки по темам:**
        {topics_summary}
        
        **Средняя оценка:** {avg_score:.1f}%
        
        **АНАЛИЗ НА ОСНОВЕ ВСЕХ ОТВЕТОВ:**
        - Найденные несостыковки: {inconsistencies}
        - Красные флаги: {red_flags}
        - Общие сильные стороны: {strengths}
        - Общие слабые стороны: {weaknesses}

        **ЗАДАЧА:**
        Составь структурированный отчет в формате JSON с ключами, описанными заранее, на русском языке.
        """
    )
